// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/spaths_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// from_to_ptr_i
Rcpp::XPtr<From_To_I> from_to_ptr_i(Rcpp::IntegerVector& cell_numbers, const bool queen, const bool global, const int rst_ncol, const int n_cells, const bool tr_fun_specified, const std::size_t max_neighbors);
RcppExport SEXP _spaths_from_to_ptr_i(SEXP cell_numbersSEXP, SEXP queenSEXP, SEXP globalSEXP, SEXP rst_ncolSEXP, SEXP n_cellsSEXP, SEXP tr_fun_specifiedSEXP, SEXP max_neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type cell_numbers(cell_numbersSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< const int >::type rst_ncol(rst_ncolSEXP);
    Rcpp::traits::input_parameter< const int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type tr_fun_specified(tr_fun_specifiedSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_neighbors(max_neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(from_to_ptr_i(cell_numbers, queen, global, rst_ncol, n_cells, tr_fun_specified, max_neighbors));
    return rcpp_result_gen;
END_RCPP
}
// from_to_ptr_u
Rcpp::XPtr<From_To_U> from_to_ptr_u(Rcpp::IntegerVector& cell_numbers, const bool queen, const bool global, const int rst_ncol, const int n_cells, const bool tr_fun_specified, const std::size_t max_neighbors);
RcppExport SEXP _spaths_from_to_ptr_u(SEXP cell_numbersSEXP, SEXP queenSEXP, SEXP globalSEXP, SEXP rst_ncolSEXP, SEXP n_cellsSEXP, SEXP tr_fun_specifiedSEXP, SEXP max_neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type cell_numbers(cell_numbersSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< const int >::type rst_ncol(rst_ncolSEXP);
    Rcpp::traits::input_parameter< const int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type tr_fun_specified(tr_fun_specifiedSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_neighbors(max_neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(from_to_ptr_u(cell_numbers, queen, global, rst_ncol, n_cells, tr_fun_specified, max_neighbors));
    return rcpp_result_gen;
END_RCPP
}
// openmp_installed
bool openmp_installed();
RcppExport SEXP _spaths_openmp_installed() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(openmp_installed());
    return rcpp_result_gen;
END_RCPP
}
// destination_names_character
Rcpp::CharacterVector destination_names_character(Rcpp::CharacterVector& origin_names);
RcppExport SEXP _spaths_destination_names_character(SEXP origin_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type origin_names(origin_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(destination_names_character(origin_names));
    return rcpp_result_gen;
END_RCPP
}
// destination_names_numeric
Rcpp::NumericVector destination_names_numeric(Rcpp::NumericVector& origin_names);
RcppExport SEXP _spaths_destination_names_numeric(SEXP origin_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type origin_names(origin_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(destination_names_numeric(origin_names));
    return rcpp_result_gen;
END_RCPP
}
// destination_names_integer
Rcpp::IntegerVector destination_names_integer(Rcpp::IntegerVector& origin_names);
RcppExport SEXP _spaths_destination_names_integer(SEXP origin_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type origin_names(origin_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(destination_names_integer(origin_names));
    return rcpp_result_gen;
END_RCPP
}
// destination_names_auto
Rcpp::IntegerVector destination_names_auto(const int n_names);
RcppExport SEXP _spaths_destination_names_auto(SEXP n_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_names(n_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(destination_names_auto(n_names));
    return rcpp_result_gen;
END_RCPP
}
// r_dists_woweights_d
Rcpp::NumericVector r_dists_woweights_d(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, const bool haversine, const bool queen, const int ncores, const bool pairwise, const bool pre, const bool early_stopping, const bool int_path, const bool double_weights, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_dists_woweights_d(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP preSEXP, SEXP early_stoppingSEXP, SEXP int_pathSEXP, SEXP double_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dists_woweights_d(from_to, starts_targets, coords, n_cells, haversine, queen, ncores, pairwise, pre, early_stopping, int_path, double_weights, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_dists_woweights_i
Rcpp::IntegerVector r_dists_woweights_i(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, const bool haversine, const bool queen, const int ncores, const bool pairwise, const bool pre, const bool early_stopping, const bool int_path, const bool signed_weights, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_dists_woweights_i(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP preSEXP, SEXP early_stoppingSEXP, SEXP int_pathSEXP, SEXP signed_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dists_woweights_i(from_to, starts_targets, coords, n_cells, haversine, queen, ncores, pairwise, pre, early_stopping, int_path, signed_weights, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_dists_wweights_d
Rcpp::NumericVector r_dists_wweights_d(Rcpp::List& from_to, Rcpp::List& starts_targets, const std::size_t n_cells, const bool early_stopping, const int ncores, const bool directed, const bool pairwise, const bool int_path, const bool double_weights, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_dists_wweights_d(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP n_cellsSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP directedSEXP, SEXP pairwiseSEXP, SEXP int_pathSEXP, SEXP double_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dists_wweights_d(from_to, starts_targets, n_cells, early_stopping, ncores, directed, pairwise, int_path, double_weights, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_dists_wweights_i
Rcpp::IntegerVector r_dists_wweights_i(Rcpp::List& from_to, Rcpp::List& starts_targets, const std::size_t n_cells, const bool early_stopping, const int ncores, const bool directed, const bool pairwise, const bool int_path, const bool signed_weights, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_dists_wweights_i(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP n_cellsSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP directedSEXP, SEXP pairwiseSEXP, SEXP int_pathSEXP, SEXP signed_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dists_wweights_i(from_to, starts_targets, n_cells, early_stopping, ncores, directed, pairwise, int_path, signed_weights, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_paths_woweights
Rcpp::List r_paths_woweights(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, const bool early_stopping, const bool haversine, const bool queen, const int ncores, const bool pairwise, const bool pre, const bool int_path, const bool numeric_weights, const bool double_weights, const bool signed_weights, const bool return_dists, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_paths_woweights(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP early_stoppingSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP preSEXP, SEXP int_pathSEXP, SEXP numeric_weightsSEXP, SEXP double_weightsSEXP, SEXP signed_weightsSEXP, SEXP return_distsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type numeric_weights(numeric_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_dists(return_distsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_paths_woweights(from_to, starts_targets, coords, n_cells, early_stopping, haversine, queen, ncores, pairwise, pre, int_path, numeric_weights, double_weights, signed_weights, return_dists, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_paths_wweights
Rcpp::List r_paths_wweights(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, const bool early_stopping, const int ncores, const bool directed, const bool pairwise, const bool int_path, const bool numeric_weights, const bool double_weights, const bool signed_weights, const bool return_dists, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_paths_wweights(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP directedSEXP, SEXP pairwiseSEXP, SEXP int_pathSEXP, SEXP numeric_weightsSEXP, SEXP double_weightsSEXP, SEXP signed_weightsSEXP, SEXP return_distsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type numeric_weights(numeric_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_dists(return_distsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_paths_wweights(from_to, starts_targets, coords, n_cells, early_stopping, ncores, directed, pairwise, int_path, numeric_weights, double_weights, signed_weights, return_dists, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_haversine_queen_i
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_haversine_queen_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::IntegerVector& row_number, Rcpp::IntegerVector& col_number, Rcpp::NumericVector& d_horizontal, const double d_vertical, Rcpp::NumericVector& d_diagonal, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_haversine_queen_i(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP col_numberSEXP, SEXP d_horizontalSEXP, SEXP d_verticalSEXP, SEXP d_diagonalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type col_number(col_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_horizontal(d_horizontalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_diagonal(d_diagonalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_haversine_queen_i(from_to, row_number, col_number, d_horizontal, d_vertical, d_diagonal, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_haversine_queen_u
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_haversine_queen_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::IntegerVector& row_number, Rcpp::IntegerVector& col_number, Rcpp::NumericVector& d_horizontal, const double d_vertical, Rcpp::NumericVector& d_diagonal, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_haversine_queen_u(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP col_numberSEXP, SEXP d_horizontalSEXP, SEXP d_verticalSEXP, SEXP d_diagonalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type col_number(col_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_horizontal(d_horizontalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_diagonal(d_diagonalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_haversine_queen_u(from_to, row_number, col_number, d_horizontal, d_vertical, d_diagonal, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_haversine_rook_i
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_haversine_rook_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::IntegerVector& row_number, Rcpp::NumericVector& d_horizontal, const double d_vertical, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_haversine_rook_i(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP d_horizontalSEXP, SEXP d_verticalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_horizontal(d_horizontalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_haversine_rook_i(from_to, row_number, d_horizontal, d_vertical, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_haversine_rook_u
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_haversine_rook_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::IntegerVector& row_number, Rcpp::NumericVector& d_horizontal, const double d_vertical, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_haversine_rook_u(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP d_horizontalSEXP, SEXP d_verticalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type d_horizontal(d_horizontalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_haversine_rook_u(from_to, row_number, d_horizontal, d_vertical, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_euclidean_queen_i
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_euclidean_queen_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::IntegerVector& row_number, Rcpp::IntegerVector& col_number, const double rst_xres, const double rst_yres, const double d_vertical, const double d_diagonal, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_euclidean_queen_i(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP col_numberSEXP, SEXP rst_xresSEXP, SEXP rst_yresSEXP, SEXP d_verticalSEXP, SEXP d_diagonalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type col_number(col_numberSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_xres(rst_xresSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_yres(rst_yresSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_diagonal(d_diagonalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_euclidean_queen_i(from_to, row_number, col_number, rst_xres, rst_yres, d_vertical, d_diagonal, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_euclidean_queen_u
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_euclidean_queen_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::IntegerVector& row_number, Rcpp::IntegerVector& col_number, const double rst_xres, const double rst_yres, const double d_vertical, const double d_diagonal, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_euclidean_queen_u(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP col_numberSEXP, SEXP rst_xresSEXP, SEXP rst_yresSEXP, SEXP d_verticalSEXP, SEXP d_diagonalSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type col_number(col_numberSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_xres(rst_xresSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_yres(rst_yresSEXP);
    Rcpp::traits::input_parameter< const double >::type d_vertical(d_verticalSEXP);
    Rcpp::traits::input_parameter< const double >::type d_diagonal(d_diagonalSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_euclidean_queen_u(from_to, row_number, col_number, rst_xres, rst_yres, d_vertical, d_diagonal, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_euclidean_rook_i
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_euclidean_rook_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::IntegerVector& row_number, const double rst_xres, const double rst_yres, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_euclidean_rook_i(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP rst_xresSEXP, SEXP rst_yresSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_xres(rst_xresSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_yres(rst_yresSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_euclidean_rook_i(from_to, row_number, rst_xres, rst_yres, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_d_euclidean_rook_u
Rcpp::XPtr<std::vector<double> > tr_fun_args_d_euclidean_rook_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::IntegerVector& row_number, const double rst_xres, const double rst_yres, const int ncores);
RcppExport SEXP _spaths_tr_fun_args_d_euclidean_rook_u(SEXP from_toSEXP, SEXP row_numberSEXP, SEXP rst_xresSEXP, SEXP rst_yresSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type row_number(row_numberSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_xres(rst_xresSEXP);
    Rcpp::traits::input_parameter< const double >::type rst_yres(rst_yresSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_d_euclidean_rook_u(from_to, row_number, rst_xres, rst_yres, ncores));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_coords_i
Rcpp::XPtr<std::vector<double> > tr_fun_args_coords_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::NumericVector& col_row_number, const bool is_from);
RcppExport SEXP _spaths_tr_fun_args_coords_i(SEXP from_toSEXP, SEXP col_row_numberSEXP, SEXP is_fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type col_row_number(col_row_numberSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_from(is_fromSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_coords_i(from_to, col_row_number, is_from));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_coords_u
Rcpp::XPtr<std::vector<double> > tr_fun_args_coords_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::NumericVector& col_row_number, const bool is_from);
RcppExport SEXP _spaths_tr_fun_args_coords_u(SEXP from_toSEXP, SEXP col_row_numberSEXP, SEXP is_fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type col_row_number(col_row_numberSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_from(is_fromSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_coords_u(from_to, col_row_number, is_from));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_v_i
Rcpp::List tr_fun_args_v_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::DataFrame& crd, Rcpp::CharacterVector& v_vars, Rcpp::CharacterVector& v_vars_classes, const bool is_from);
RcppExport SEXP _spaths_tr_fun_args_v_i(SEXP from_toSEXP, SEXP crdSEXP, SEXP v_varsSEXP, SEXP v_vars_classesSEXP, SEXP is_fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame& >::type crd(crdSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v_vars(v_varsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v_vars_classes(v_vars_classesSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_from(is_fromSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_v_i(from_to, crd, v_vars, v_vars_classes, is_from));
    return rcpp_result_gen;
END_RCPP
}
// tr_fun_args_v_u
Rcpp::List tr_fun_args_v_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::DataFrame& crd, Rcpp::CharacterVector& v_vars, Rcpp::CharacterVector& v_vars_classes, const bool is_from);
RcppExport SEXP _spaths_tr_fun_args_v_u(SEXP from_toSEXP, SEXP crdSEXP, SEXP v_varsSEXP, SEXP v_vars_classesSEXP, SEXP is_fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame& >::type crd(crdSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v_vars(v_varsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v_vars_classes(v_vars_classesSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_from(is_fromSEXP);
    rcpp_result_gen = Rcpp::wrap(tr_fun_args_v_u(from_to, crd, v_vars, v_vars_classes, is_from));
    return rcpp_result_gen;
END_RCPP
}
// check_weights_i_d
void check_weights_i_d(Rcpp::XPtr<From_To_I> from_to, Rcpp::XPtr<std::vector<double> > weights);
RcppExport SEXP _spaths_check_weights_i_d(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type weights(weightsSEXP);
    check_weights_i_d(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_i_f
void check_weights_i_f(Rcpp::XPtr<From_To_I> from_to, Rcpp::XPtr<std::vector<float> > weights);
RcppExport SEXP _spaths_check_weights_i_f(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<float> > >::type weights(weightsSEXP);
    check_weights_i_f(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_i_i
void check_weights_i_i(Rcpp::XPtr<From_To_I> from_to, Rcpp::XPtr<std::vector<int> > weights);
RcppExport SEXP _spaths_check_weights_i_i(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type weights(weightsSEXP);
    check_weights_i_i(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_i_u
void check_weights_i_u(Rcpp::XPtr<From_To_I> from_to, Rcpp::XPtr<std::vector<unsigned short int> > weights);
RcppExport SEXP _spaths_check_weights_i_u(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_I> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<unsigned short int> > >::type weights(weightsSEXP);
    check_weights_i_u(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_u_d
void check_weights_u_d(Rcpp::XPtr<From_To_U> from_to, Rcpp::XPtr<std::vector<double> > weights);
RcppExport SEXP _spaths_check_weights_u_d(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type weights(weightsSEXP);
    check_weights_u_d(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_u_f
void check_weights_u_f(Rcpp::XPtr<From_To_U> from_to, Rcpp::XPtr<std::vector<float> > weights);
RcppExport SEXP _spaths_check_weights_u_f(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<float> > >::type weights(weightsSEXP);
    check_weights_u_f(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_u_i
void check_weights_u_i(Rcpp::XPtr<From_To_U> from_to, Rcpp::XPtr<std::vector<int> > weights);
RcppExport SEXP _spaths_check_weights_u_i(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type weights(weightsSEXP);
    check_weights_u_i(from_to, weights);
    return R_NilValue;
END_RCPP
}
// check_weights_u_u
void check_weights_u_u(Rcpp::XPtr<From_To_U> from_to, Rcpp::XPtr<std::vector<unsigned short int> > weights);
RcppExport SEXP _spaths_check_weights_u_u(SEXP from_toSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<From_To_U> >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<unsigned short int> > >::type weights(weightsSEXP);
    check_weights_u_u(from_to, weights);
    return R_NilValue;
END_RCPP
}
// r_upd_dists_woweights_d
Rcpp::NumericVector r_upd_dists_woweights_d(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool haversine, const bool queen, const int ncores, const bool par_lvl_upd, const bool pairwise, const bool pre, const bool early_stopping, const bool int_path, const bool double_weights, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_dists_woweights_d(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP par_lvl_updSEXP, SEXP pairwiseSEXP, SEXP preSEXP, SEXP early_stoppingSEXP, SEXP int_pathSEXP, SEXP double_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_dists_woweights_d(from_to, starts_targets, coords, n_cells, upd_rst_r, haversine, queen, ncores, par_lvl_upd, pairwise, pre, early_stopping, int_path, double_weights, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_upd_dists_woweights_i
Rcpp::IntegerVector r_upd_dists_woweights_i(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool haversine, const bool queen, const int ncores, const bool par_lvl_upd, const bool pairwise, const bool pre, const bool early_stopping, const bool int_path, const bool signed_weights, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_dists_woweights_i(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP par_lvl_updSEXP, SEXP pairwiseSEXP, SEXP preSEXP, SEXP early_stoppingSEXP, SEXP int_pathSEXP, SEXP signed_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_dists_woweights_i(from_to, starts_targets, coords, n_cells, upd_rst_r, haversine, queen, ncores, par_lvl_upd, pairwise, pre, early_stopping, int_path, signed_weights, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_upd_dists_wweights_d
Rcpp::NumericVector r_upd_dists_wweights_d(Rcpp::List& from_to, Rcpp::List& starts_targets, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool early_stopping, const int ncores, const bool pairwise, const bool directed, const bool par_lvl_upd, const bool int_path, const bool double_weights, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_dists_wweights_d(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP directedSEXP, SEXP par_lvl_updSEXP, SEXP int_pathSEXP, SEXP double_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_dists_wweights_d(from_to, starts_targets, n_cells, upd_rst_r, early_stopping, ncores, pairwise, directed, par_lvl_upd, int_path, double_weights, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_upd_dists_wweights_i
Rcpp::IntegerVector r_upd_dists_wweights_i(Rcpp::List& from_to, Rcpp::List& starts_targets, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool early_stopping, const int ncores, const bool pairwise, const bool directed, const bool par_lvl_upd, const bool int_path, const bool signed_weights, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_dists_wweights_i(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP directedSEXP, SEXP par_lvl_updSEXP, SEXP int_pathSEXP, SEXP signed_weightsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_dists_wweights_i(from_to, starts_targets, n_cells, upd_rst_r, early_stopping, ncores, pairwise, directed, par_lvl_upd, int_path, signed_weights, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_upd_paths_woweights
Rcpp::List r_upd_paths_woweights(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool early_stopping, const bool haversine, const bool queen, const int ncores, const bool pairwise, const bool par_lvl_upd, const bool pre, const bool int_path, const bool numeric_weights, const bool double_weights, const bool signed_weights, const bool return_dists, const bool show_progress, const int bar_limit, const double radius2, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_paths_woweights(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP early_stoppingSEXP, SEXP haversineSEXP, SEXP queenSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP par_lvl_updSEXP, SEXP preSEXP, SEXP int_pathSEXP, SEXP numeric_weightsSEXP, SEXP double_weightsSEXP, SEXP signed_weightsSEXP, SEXP return_distsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP radius2SEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const bool >::type haversine(haversineSEXP);
    Rcpp::traits::input_parameter< const bool >::type queen(queenSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type pre(preSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type numeric_weights(numeric_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_dists(return_distsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type radius2(radius2SEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_paths_woweights(from_to, starts_targets, coords, n_cells, upd_rst_r, early_stopping, haversine, queen, ncores, pairwise, par_lvl_upd, pre, int_path, numeric_weights, double_weights, signed_weights, return_dists, show_progress, bar_limit, radius2, from_to_r));
    return rcpp_result_gen;
END_RCPP
}
// r_upd_paths_wweights
Rcpp::List r_upd_paths_wweights(Rcpp::List& from_to, Rcpp::List& starts_targets, Rcpp::List& coords, const std::size_t n_cells, Rcpp::List& upd_rst_r, const bool early_stopping, const int ncores, const bool pairwise, const bool directed, const bool par_lvl_upd, const bool int_path, const bool numeric_weights, const bool double_weights, const bool signed_weights, const bool return_dists, const bool show_progress, const int bar_limit, const bool from_to_r);
RcppExport SEXP _spaths_r_upd_paths_wweights(SEXP from_toSEXP, SEXP starts_targetsSEXP, SEXP coordsSEXP, SEXP n_cellsSEXP, SEXP upd_rst_rSEXP, SEXP early_stoppingSEXP, SEXP ncoresSEXP, SEXP pairwiseSEXP, SEXP directedSEXP, SEXP par_lvl_updSEXP, SEXP int_pathSEXP, SEXP numeric_weightsSEXP, SEXP double_weightsSEXP, SEXP signed_weightsSEXP, SEXP return_distsSEXP, SEXP show_progressSEXP, SEXP bar_limitSEXP, SEXP from_to_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type starts_targets(starts_targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type upd_rst_r(upd_rst_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type early_stopping(early_stoppingSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const bool >::type par_lvl_upd(par_lvl_updSEXP);
    Rcpp::traits::input_parameter< const bool >::type int_path(int_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type numeric_weights(numeric_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type double_weights(double_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type signed_weights(signed_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_dists(return_distsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int >::type bar_limit(bar_limitSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_to_r(from_to_rSEXP);
    rcpp_result_gen = Rcpp::wrap(r_upd_paths_wweights(from_to, starts_targets, coords, n_cells, upd_rst_r, early_stopping, ncores, pairwise, directed, par_lvl_upd, int_path, numeric_weights, double_weights, signed_weights, return_dists, show_progress, bar_limit, from_to_r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spaths_from_to_ptr_i", (DL_FUNC) &_spaths_from_to_ptr_i, 7},
    {"_spaths_from_to_ptr_u", (DL_FUNC) &_spaths_from_to_ptr_u, 7},
    {"_spaths_openmp_installed", (DL_FUNC) &_spaths_openmp_installed, 0},
    {"_spaths_destination_names_character", (DL_FUNC) &_spaths_destination_names_character, 1},
    {"_spaths_destination_names_numeric", (DL_FUNC) &_spaths_destination_names_numeric, 1},
    {"_spaths_destination_names_integer", (DL_FUNC) &_spaths_destination_names_integer, 1},
    {"_spaths_destination_names_auto", (DL_FUNC) &_spaths_destination_names_auto, 1},
    {"_spaths_r_dists_woweights_d", (DL_FUNC) &_spaths_r_dists_woweights_d, 16},
    {"_spaths_r_dists_woweights_i", (DL_FUNC) &_spaths_r_dists_woweights_i, 16},
    {"_spaths_r_dists_wweights_d", (DL_FUNC) &_spaths_r_dists_wweights_d, 12},
    {"_spaths_r_dists_wweights_i", (DL_FUNC) &_spaths_r_dists_wweights_i, 12},
    {"_spaths_r_paths_woweights", (DL_FUNC) &_spaths_r_paths_woweights, 19},
    {"_spaths_r_paths_wweights", (DL_FUNC) &_spaths_r_paths_wweights, 16},
    {"_spaths_tr_fun_args_d_haversine_queen_i", (DL_FUNC) &_spaths_tr_fun_args_d_haversine_queen_i, 7},
    {"_spaths_tr_fun_args_d_haversine_queen_u", (DL_FUNC) &_spaths_tr_fun_args_d_haversine_queen_u, 7},
    {"_spaths_tr_fun_args_d_haversine_rook_i", (DL_FUNC) &_spaths_tr_fun_args_d_haversine_rook_i, 5},
    {"_spaths_tr_fun_args_d_haversine_rook_u", (DL_FUNC) &_spaths_tr_fun_args_d_haversine_rook_u, 5},
    {"_spaths_tr_fun_args_d_euclidean_queen_i", (DL_FUNC) &_spaths_tr_fun_args_d_euclidean_queen_i, 8},
    {"_spaths_tr_fun_args_d_euclidean_queen_u", (DL_FUNC) &_spaths_tr_fun_args_d_euclidean_queen_u, 8},
    {"_spaths_tr_fun_args_d_euclidean_rook_i", (DL_FUNC) &_spaths_tr_fun_args_d_euclidean_rook_i, 5},
    {"_spaths_tr_fun_args_d_euclidean_rook_u", (DL_FUNC) &_spaths_tr_fun_args_d_euclidean_rook_u, 5},
    {"_spaths_tr_fun_args_coords_i", (DL_FUNC) &_spaths_tr_fun_args_coords_i, 3},
    {"_spaths_tr_fun_args_coords_u", (DL_FUNC) &_spaths_tr_fun_args_coords_u, 3},
    {"_spaths_tr_fun_args_v_i", (DL_FUNC) &_spaths_tr_fun_args_v_i, 5},
    {"_spaths_tr_fun_args_v_u", (DL_FUNC) &_spaths_tr_fun_args_v_u, 5},
    {"_spaths_check_weights_i_d", (DL_FUNC) &_spaths_check_weights_i_d, 2},
    {"_spaths_check_weights_i_f", (DL_FUNC) &_spaths_check_weights_i_f, 2},
    {"_spaths_check_weights_i_i", (DL_FUNC) &_spaths_check_weights_i_i, 2},
    {"_spaths_check_weights_i_u", (DL_FUNC) &_spaths_check_weights_i_u, 2},
    {"_spaths_check_weights_u_d", (DL_FUNC) &_spaths_check_weights_u_d, 2},
    {"_spaths_check_weights_u_f", (DL_FUNC) &_spaths_check_weights_u_f, 2},
    {"_spaths_check_weights_u_i", (DL_FUNC) &_spaths_check_weights_u_i, 2},
    {"_spaths_check_weights_u_u", (DL_FUNC) &_spaths_check_weights_u_u, 2},
    {"_spaths_r_upd_dists_woweights_d", (DL_FUNC) &_spaths_r_upd_dists_woweights_d, 18},
    {"_spaths_r_upd_dists_woweights_i", (DL_FUNC) &_spaths_r_upd_dists_woweights_i, 18},
    {"_spaths_r_upd_dists_wweights_d", (DL_FUNC) &_spaths_r_upd_dists_wweights_d, 14},
    {"_spaths_r_upd_dists_wweights_i", (DL_FUNC) &_spaths_r_upd_dists_wweights_i, 14},
    {"_spaths_r_upd_paths_woweights", (DL_FUNC) &_spaths_r_upd_paths_woweights, 21},
    {"_spaths_r_upd_paths_wweights", (DL_FUNC) &_spaths_r_upd_paths_wweights, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_spaths(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
